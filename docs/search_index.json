[["text-analytics-a-start.html", "Chapter 13 Text Analytics: A Start 13.1 Installing quanteda 13.2 Building a corpus from character vector 13.3 Tokenization 13.4 Keyword-in-Context (KWIC) 13.5 KWIC with Regular Expressions 13.6 Lexical Density Plot 13.7 Collocation 13.8 Document-Feature Matrix 13.9 Feature Selection 13.10 Top Features 13.11 Wordclouds 13.12 Keyness Analysis 13.13 Flowchart 13.14 Exercises", " Chapter 13 Text Analytics: A Start In this chapter, I will present a quick overview of computational text analytics with R. The most important package for exploratory text analysis is quanteda. As computational text analytics itself is an interesting topic, I would recommend other more advanced courses for those who are interested in this field (e.g., ENC2036:Corpus Linguistics, ENC2045:Computational Linguistics) This chapter only provides you a very general overview of the common procedures/tasks in text processing. 13.1 Installing quanteda There are many packages that are made for computational text analytics in R. You may consult the CRAN Task View: Natural Language Processing for a lot more alternatives. To start with, this tutorial will use a powerful package, quanteda, for managing and analyzing textual data in R. You may refer to the official documentation of the package for more detail. The libraryquanteda is not included in the default base R installation. Please install the package if you haven’t done so. install.packages(&quot;quanteda&quot;) install.packages(&quot;quanteda.textmodels&quot;) install.packages(&quot;quanteda.textstats&quot;) install.packages(&quot;quanteda.textplots&quot;) install.packages(&quot;readtext&quot;) # remotes::install_github(&quot;quanteda/quanteda.corpora&quot;) # remotes::install_github(&quot;kbenoit/quanteda.dictionaries&quot;) Also, as noted on the quanteda documentation, because this library compiles some C++ and Fortran source code, you need to install the appropriate compilers. If you are using a Windows platform, this means you will need also to install the Rtools software available from CRAN. If you are using macOS, you should install the macOS tools. If you run into any installation errors, please go to the official documentation page for additional assistance. The library quanteda contains all of the core natural language processing and textual data management functions.The following libraries work with quanteda, providing more advanced functions for computational text analytics. quanteda.textmodels: includes the text models and supporting functions (i.e., textmodel_*() functions). quanteda.textstats: includes statistic processing for textual data (i.e., textstat_*() functions). quanteda.textplots: includes plotting functions for textual data (i.e., textplot_*() functions). quanteda.corpora: Additional textual data for use with quanteda. (Install using: remotes::install_github(\"quanteda/quanteda.corpora\") quanteda.dictionaries: Various dictionaries for use with quanteda, including the function liwcalike(), an R implementation of the Linguistic Inquiry and Word Count approach to text analysis. (Install using: remotes::install_github(\"kbenoit/quanteda.dictionaries\") library(quanteda) library(quanteda.textplots) library(quanteda.textstats) library(tidyverse) packageVersion(&quot;quanteda&quot;) [1] &#39;4.1.0&#39; 13.2 Building a corpus from character vector To demonstrate a typical corpus analytic example with texts, I will be using a pre-loaded corpus that comes with the quanteda package, data_corpus_inaugural. This is a corpus of US Presidential Inaugural Address texts and metadata for the corpus from 1789 to present. data_corpus_inaugural Corpus consisting of 59 documents and 4 docvars. 1789-Washington : &quot;Fellow-Citizens of the Senate and of the House of Representa...&quot; 1793-Washington : &quot;Fellow citizens, I am again called upon by the voice of my c...&quot; 1797-Adams : &quot;When it was first perceived, in early times, that no middle ...&quot; 1801-Jefferson : &quot;Friends and Fellow Citizens: Called upon to undertake the du...&quot; 1805-Jefferson : &quot;Proceeding, fellow citizens, to that qualification which the...&quot; 1809-Madison : &quot;Unwilling to depart from examples of the most revered author...&quot; [ reached max_ndoc ... 53 more documents ] class(data_corpus_inaugural) [1] &quot;corpus&quot; &quot;character&quot; length(data_corpus_inaugural) [1] 59 names(data_corpus_inaugural) [1] &quot;1789-Washington&quot; &quot;1793-Washington&quot; &quot;1797-Adams&quot; &quot;1801-Jefferson&quot; [5] &quot;1805-Jefferson&quot; &quot;1809-Madison&quot; &quot;1813-Madison&quot; &quot;1817-Monroe&quot; [9] &quot;1821-Monroe&quot; &quot;1825-Adams&quot; &quot;1829-Jackson&quot; &quot;1833-Jackson&quot; [13] &quot;1837-VanBuren&quot; &quot;1841-Harrison&quot; &quot;1845-Polk&quot; &quot;1849-Taylor&quot; [17] &quot;1853-Pierce&quot; &quot;1857-Buchanan&quot; &quot;1861-Lincoln&quot; &quot;1865-Lincoln&quot; [21] &quot;1869-Grant&quot; &quot;1873-Grant&quot; &quot;1877-Hayes&quot; &quot;1881-Garfield&quot; [25] &quot;1885-Cleveland&quot; &quot;1889-Harrison&quot; &quot;1893-Cleveland&quot; &quot;1897-McKinley&quot; [29] &quot;1901-McKinley&quot; &quot;1905-Roosevelt&quot; &quot;1909-Taft&quot; &quot;1913-Wilson&quot; [33] &quot;1917-Wilson&quot; &quot;1921-Harding&quot; &quot;1925-Coolidge&quot; &quot;1929-Hoover&quot; [37] &quot;1933-Roosevelt&quot; &quot;1937-Roosevelt&quot; &quot;1941-Roosevelt&quot; &quot;1945-Roosevelt&quot; [41] &quot;1949-Truman&quot; &quot;1953-Eisenhower&quot; &quot;1957-Eisenhower&quot; &quot;1961-Kennedy&quot; [45] &quot;1965-Johnson&quot; &quot;1969-Nixon&quot; &quot;1973-Nixon&quot; &quot;1977-Carter&quot; [49] &quot;1981-Reagan&quot; &quot;1985-Reagan&quot; &quot;1989-Bush&quot; &quot;1993-Clinton&quot; [53] &quot;1997-Clinton&quot; &quot;2001-Bush&quot; &quot;2005-Bush&quot; &quot;2009-Obama&quot; [57] &quot;2013-Obama&quot; &quot;2017-Trump&quot; &quot;2021-Biden&quot; We create a corpus() object with the pre-loaded corpus in quanteda– data_corpus_inaugural: corp_us &lt;- corpus(data_corpus_inaugural) # save the `corpus` to a short obj name summary(corp_us) After the corpus is loaded, we can use summary() to get the metadata of each text in the corpus, including word types and tokens as well. This allows us to have a quick look at the size of the addresses made by all presidents. In quanteda, it has implemented a default tokenization method for English texts. I think it has also implemented a default tokenization method for Chinese texts as well. For more control on the word segmentation, you may need to consult other segmentation packages (e.g., jiebaR, ckiptagger etc.). More details are usually discussed in ENC2045 or ENC2036. corp_us %&gt;% summary %&gt;% ggplot(aes(x = Year, y = Tokens, group = 1)) + geom_line() + geom_point() + theme_bw() Exercise 13.1 Could you reproduce the above line plot and add information of President to the plot as labels of the dots? Hints: Please check ggplot2::geom_text() or more advanced one, ggrepel::geom_text_repel() 13.3 Tokenization The first step for most textual analyses is usually tokenization, i.e., breaking each long text into word tokens for linguistic analysis. corp_us_tokens &lt;- tokens(corp_us) corp_us_tokens[1] Tokens consisting of 1 document and 4 docvars. 1789-Washington : [1] &quot;Fellow-Citizens&quot; &quot;of&quot; &quot;the&quot; &quot;Senate&quot; [5] &quot;and&quot; &quot;of&quot; &quot;the&quot; &quot;House&quot; [9] &quot;of&quot; &quot;Representatives&quot; &quot;:&quot; &quot;Among&quot; [ ... and 1,525 more ] Starting from quanteda version 4.0+, a new class of tokens object, tokens_xptr, was introduced. This object enhances the efficiency of adjusting tokens objects based on large text corpora. 13.4 Keyword-in-Context (KWIC) Keyword-in-Context (KWIC), or concordances, are the most frequently used method in corpus analysis. The idea is very intuitive: we get to know more about the semantics of a word (or any other linguistic unit) by examining how it is being used in a wider context. We can use kwic() to perform a search for a word and retrieve its concordances from the corpus: kwic(corp_us_tokens, &quot;terror&quot;, window = 5) kwic() returns a data frame, which can be easily exported as a CSV file for later use. Please note that kwic() takes a tokens object as the input argument. That is, please tokenize the corpus object with tokens() first before you perform more advanced textual analysis, e.g., kwic(). Also, with kwic(), the pattern you look for cannot be a multi-word linguistic pattern. For Chinese, quanteda can take care of Chinese word segmentation but with rather limited capacity. texts &lt;- c(&quot;舞台正中間擺著一張「空著的導演椅」，影片一下全場鼻酸。&quot;, &quot;第58屆金馬獎頒獎典禮今（27）日在國父紀念館盛大登場，星光大道紅毯於下午5點30分登場。&quot;) corpus_ch &lt;- corpus(texts) corpus_ch Corpus consisting of 2 documents. text1 : &quot;舞台正中間擺著一張「空著的導演椅」，影片一下全場鼻酸。&quot; text2 : &quot;第58屆金馬獎頒獎典禮今（27）日在國父紀念館盛大登場，星光大道紅毯於下午5點30分登場。&quot; corpus_ch_tokens &lt;- tokens(corpus_ch) corpus_ch_tokens[[1]] [1] &quot;舞台&quot; &quot;正&quot; &quot;中間&quot; &quot;擺著&quot; &quot;一張&quot; &quot;「&quot; &quot;空&quot; &quot;著&quot; &quot;的&quot; &quot;導演&quot; [11] &quot;椅&quot; &quot;」&quot; &quot;，&quot; &quot;影片&quot; &quot;一下&quot; &quot;全&quot; &quot;場&quot; &quot;鼻酸&quot; &quot;。&quot; corpus_ch_tokens[[2]] [1] &quot;第&quot; &quot;58&quot; &quot;屆&quot; &quot;金馬獎&quot; &quot;頒獎典禮&quot; [6] &quot;今&quot; &quot;（&quot; &quot;27&quot; &quot;）&quot; &quot;日&quot; [11] &quot;在&quot; &quot;國父紀念館&quot; &quot;盛大&quot; &quot;登場&quot; &quot;，&quot; [16] &quot;星光&quot; &quot;大道&quot; &quot;紅&quot; &quot;毯&quot; &quot;於&quot; [21] &quot;下午&quot; &quot;5&quot; &quot;點&quot; &quot;30&quot; &quot;分&quot; [26] &quot;登場&quot; &quot;。&quot; 13.5 KWIC with Regular Expressions For more complex searches, we can use regular expressions as well in kwic(). For example, if you want to include terror and all its other related word forms, such as terrorist, terrorism, terrors, you can do a regular expression search. kwic(corp_us_tokens, &quot;terror.*&quot;, valuetype = &quot;regex&quot;) By default, the kwic() is word-based. If you like to look up a multiword combination, use phrase(): kwic(corp_us_tokens, phrase(&quot;our country&quot;)) kwic(corp_us_tokens, phrase(&quot;[a-zA-Z]+ against&quot;), valuetype=&quot;regex&quot;) It should be noted that the output of kwic includes not only the concordances (i.e., preceding/subsequent co-texts + the keyword), but also the sources of the texts for each concordance line. This would be extremely convenient if you need to refer back to the original discourse context of the concordance line. Exercise 13.2 Please create a bar plot, showing the number of uses of the word country in each president’s address. Please include different variants of the word, e.g., countries, Countries, Country, in your kwic() search. 13.6 Lexical Density Plot Plotting a kwic object produces a lexical dispersion plot, which allows us to visualize the occurrences of particular terms throughout the texts. corp_us_tokens %&gt;% tokens_subset(Year &gt; 1949) %&gt;% kwic(pattern= &quot;american&quot;) %&gt;% textplot_xray() ## subset the corpus corp_us_subset &lt;- corp_us_tokens %&gt;% tokens_subset(Year &gt; 1949) ## Plotting textplot_xray(kwic(corp_us_subset, pattern = &quot;american&quot;), kwic(corp_us_subset, pattern = &quot;people&quot;)) + aes(color = keyword) + scale_color_manual(values = c(&#39;lightpink&#39;, &#39;royalblue&#39;)) 13.7 Collocation The textstat_collocations() function in the quanteda package is designed to identify and analyze collocations in textual data. Collocations are sequences of words that frequently appear together in a given corpus, such as “strong coffee”, “ice cream” or “New York.” This function computes lexical associations to score and rank these word combinations, helping to uncover meaningful multi-word expressions or phrases. ## collocation (raw) textstat_collocations(corp_us_tokens, size = 2, min_count = 5, tolower = F) We can consider removing irrelevant tokens before extracting collocations or multiword sequences. The function textstat_collocations() allows you to specify the cutoff for minimum frequency as well (to avoid idiosyncratic patterns). ## collocation (filtered) ## Remove stopwords corp_us_tokens %&gt;% tokens_remove(stopwords(&quot;en&quot;), padding = TRUE) %&gt;% textstat_collocations(size = 2, min_count = 2, tolower = F) ## collocation (filtered) ## Remvoe stopwords, include proper names only corp_us_tokens %&gt;% tokens_remove(stopwords(&quot;en&quot;), padding = TRUE) %&gt;% tokens_select(pattern = &quot;^[A-Z]\\\\w+&quot;, valuetype = &quot;regex&quot;, case_insensitive = FALSE, padding = TRUE) %&gt;% textstat_collocations(size = 2, min_count = 2, tolower = F) 13.8 Document-Feature Matrix An essential object class in quanteda is the dfm, which stands for Document-Feature Matrix. This matrix is a two-dimensional table where the rows represent the documents in the corpus, and the columns represent the features (e.g., words or terms) used to describe the documents. The cells in the matrix typically contain co-occurrence statistics, quantifying how often each feature appears in a given document. The usual workflow involves first creating a tokens object from the corpus using the tokens() function. Then, the dfm() function is applied to the tokens object to generate the dfm representation. When creating the tokens object, you can specify which tokens (e.g., words or phrases) are relevant for your analysis, ensuring that only meaningful features are included in the dfm. In summary, it is generally recommended to use a tokens object as the input when constructing a dfm. corp_us_dfm &lt;- corp_us_tokens %&gt;% dfm class(corp_us_dfm) [1] &quot;dfm&quot; attr(,&quot;package&quot;) [1] &quot;quanteda&quot; corp_us_dfm Document-feature matrix of: 59 documents, 9,437 features (91.84% sparse) and 4 docvars. features docs fellow-citizens of the senate and house representatives : 1789-Washington 1 71 116 1 48 2 2 1 1793-Washington 0 11 13 0 2 0 0 1 1797-Adams 3 140 163 1 130 0 2 0 1801-Jefferson 2 104 130 0 81 0 0 1 1805-Jefferson 0 101 143 0 93 0 0 0 1809-Madison 1 69 104 0 43 0 0 0 features docs among vicissitudes 1789-Washington 1 1 1793-Washington 0 0 1797-Adams 4 0 1801-Jefferson 1 0 1805-Jefferson 7 0 1809-Madison 0 0 [ reached max_ndoc ... 53 more documents, reached max_nfeat ... 9,427 more features ] We can see that in the first document, i.e., 1789-Washington, there are 2 occurrences of representatives, 48 occurrences of and. 13.9 Feature Selection The dfm created above may not be as informative as expected because not all words contribute meaningfully to the document’s semantics. To better represent the semantic content of a document, several critical aspects of the dfm features should be carefully considered: Granularity: The level of detail captured by the features. Informativeness: The relevance and significance of the features for the analysis. Distributional Properties: How the features are distributed across the documents. Fortunately, the dfm() function provides various parameters that allow users to customize feature selection. In addition, in quanteda, the dfm_trim() function can be applied to refine the dfm by filtering important features based on distributional properties (e.g., frequency and document frequency counts). corp_dfm_trimmed &lt;- corp_us %&gt;% tokens( remove_punct = T, remove_numbers= T, remove_symbols = T) %&gt;% dfm %&gt;% dfm_remove(stopwords(&quot;en&quot;)) %&gt;% dfm_trim(min_termfreq = 10, termfreq_type = &quot;count&quot;, min_docfreq = 3, max_docfreq = ndoc(corp_us)-1, docfreq_type = &quot;count&quot;) dim(corp_us_dfm) [1] 59 9437 dim(corp_dfm_trimmed) [1] 59 1402 13.10 Top Features With a dfm, we can check important features from the corpus. topfeatures(corp_dfm_trimmed,10) people government us can must upon great 584 564 505 487 376 371 344 may states world 343 334 319 We can also extract ngram-based features from each document for analysis: corp_us_tokens %&gt;% tokens_ngrams(n = 3) Tokens consisting of 59 documents and 4 docvars. 1789-Washington : [1] &quot;Fellow-Citizens_of_the&quot; &quot;of_the_Senate&quot; [3] &quot;the_Senate_and&quot; &quot;Senate_and_of&quot; [5] &quot;and_of_the&quot; &quot;of_the_House&quot; [7] &quot;the_House_of&quot; &quot;House_of_Representatives&quot; [9] &quot;of_Representatives_:&quot; &quot;Representatives_:_Among&quot; [11] &quot;:_Among_the&quot; &quot;Among_the_vicissitudes&quot; [ ... and 1,523 more ] 1793-Washington : [1] &quot;Fellow_citizens_,&quot; &quot;citizens_,_I&quot; &quot;,_I_am&quot; [4] &quot;I_am_again&quot; &quot;am_again_called&quot; &quot;again_called_upon&quot; [7] &quot;called_upon_by&quot; &quot;upon_by_the&quot; &quot;by_the_voice&quot; [10] &quot;the_voice_of&quot; &quot;voice_of_my&quot; &quot;of_my_country&quot; [ ... and 133 more ] 1797-Adams : [1] &quot;When_it_was&quot; &quot;it_was_first&quot; &quot;was_first_perceived&quot; [4] &quot;first_perceived_,&quot; &quot;perceived_,_in&quot; &quot;,_in_early&quot; [7] &quot;in_early_times&quot; &quot;early_times_,&quot; &quot;times_,_that&quot; [10] &quot;,_that_no&quot; &quot;that_no_middle&quot; &quot;no_middle_course&quot; [ ... and 2,563 more ] 1801-Jefferson : [1] &quot;Friends_and_Fellow&quot; &quot;and_Fellow_Citizens&quot; &quot;Fellow_Citizens_:&quot; [4] &quot;Citizens_:_Called&quot; &quot;:_Called_upon&quot; &quot;Called_upon_to&quot; [7] &quot;upon_to_undertake&quot; &quot;to_undertake_the&quot; &quot;undertake_the_duties&quot; [10] &quot;the_duties_of&quot; &quot;duties_of_the&quot; &quot;of_the_first&quot; [ ... and 1,909 more ] 1805-Jefferson : [1] &quot;Proceeding_,_fellow&quot; &quot;,_fellow_citizens&quot; [3] &quot;fellow_citizens_,&quot; &quot;citizens_,_to&quot; [5] &quot;,_to_that&quot; &quot;to_that_qualification&quot; [7] &quot;that_qualification_which&quot; &quot;qualification_which_the&quot; [9] &quot;which_the_Constitution&quot; &quot;the_Constitution_requires&quot; [11] &quot;Constitution_requires_before&quot; &quot;requires_before_my&quot; [ ... and 2,366 more ] 1809-Madison : [1] &quot;Unwilling_to_depart&quot; &quot;to_depart_from&quot; &quot;depart_from_examples&quot; [4] &quot;from_examples_of&quot; &quot;examples_of_the&quot; &quot;of_the_most&quot; [7] &quot;the_most_revered&quot; &quot;most_revered_authority&quot; &quot;revered_authority_,&quot; [10] &quot;authority_,_I&quot; &quot;,_I_avail&quot; &quot;I_avail_myself&quot; [ ... and 1,247 more ] [ reached max_ndoc ... 53 more documents ] corp_us_tokens %&gt;% tokens_ngrams(n = 3) %&gt;% dfm %&gt;% dfm_trim(min_termfreq = 5, termfreq_type = &quot;count&quot;, min_docfreq = 2, max_docfreq = ndoc(corp_us)-1, docfreq_type = &quot;count&quot;) -&gt; corp_dfm_trigram topfeatures(corp_dfm_trigram) ._it_is the_united_states ,_and_the ._we_have 156 152 137 101 of_the_united of_the_people of_the_government ._we_are 99 97 79 68 of_the_world ._we_will 63 63 How to remove irrelevant trigrams? (e.g., ones that include punctuation marks?) the_united_states of_the_united of_the_people of_the_government 152 99 97 79 of_the_world of_our_country of_the_union of_our_people 63 49 49 48 as_well_as of_the_country 47 47 13.11 Wordclouds With a dfm, we can visualize important words in the corpus with a Word Cloud. It is a novel but intuitive visual representation of text data. It allows us to quickly perceive the most prominent words from a large collection of texts. corp_dfm_trimmed %&gt;% textplot_wordcloud(min_count = 50, random_order = FALSE, rotation = .25, color = RColorBrewer::brewer.pal(10, &quot;Paired&quot;)) We can also compare word clouds for different subsets of the corpus: corpus_subset(corp_us, President %in% c(&quot;Obama&quot;, &quot;Trump&quot;, &quot;Clinton&quot;)) %&gt;% tokens(remove_punct = T, remove_numbers= T, remove_symbols = T) %&gt;% tokens_group(groups = President) %&gt;% dfm() %&gt;% dfm_remove(stopwords(&quot;en&quot;)) %&gt;% dfm_trim(min_termfreq = 5, termfreq_type = &quot;count&quot;) %&gt;% textplot_wordcloud(comparison = TRUE) 13.12 Keyness Analysis When you have two collections of texts, we can use quantitative methods to identify which words are more strongly associated with one of the two sub-corpora. This is the idea of keyword analysis. # Only select speeches by Obama and Trump pres_corpus &lt;- corpus_subset(corp_us, President %in% c(&quot;Trump&quot;, &quot;Biden&quot;)) # Create a dfm grouped by president pres_dfm &lt;- pres_corpus %&gt;% tokens(remove_punct = T, remove_numbers= T, remove_symbols = T) %&gt;% tokens_remove(stopwords(&quot;en&quot;)) %&gt;% tokens_group(groups = President) %&gt;% dfm(tolower=F) # Calculate keyness and determine Trump as target group result_keyness &lt;- textstat_keyness(pres_dfm, target = &quot;Biden&quot;, measure = &quot;lr&quot;) # Plot estimated word keyness textplot_keyness(result_keyness, color = c(&quot;red&quot;, &quot;blue&quot;), n = 30) 13.13 Flowchart Finally, Figure 13.1 below provides a summary flowchart for computatutional text analytics in R. Figure 13.1: Computational Text Processing Flowchart in R 13.14 Exercises In the following exercise, please use the dataset demo_data/TW_President_zh.tar.gz, which is a text collection of the inaugural speeches of Taiwan Presidents (till 2024). Corpus files often consist of a large number of documents, making it practical to compress them into a single file for efficient data exchange. One of the most common formats for this purpose is tar.gz. A TAR, TAR.GZ, or GZ file is a widely used format for bundling and compressing data, particularly in Linux-based systems: tar file: A TAR (Tape Archive) file is an archive format that combines multiple files and directories into a single file without compression—like packing items into a box. tar.gz file: A TAR file that has been compressed using the gzip algorithm. It combines bundling (via TAR) and compression (via gzip), akin to sealing and shrinking the packed box. gz file: A file compressed using gzip directly, typically applied to a single file to reduce its size for easier storage or transfer. You may load the entire text collection as a corpus object using the following code: require(readtext) require(quanteda) corp_tw &lt;- readtext(&quot;demo_data/TW_President_zh.tar.gz&quot;, verbosity = 0) %&gt;% corpus Exercise 13.3 Please create a data frame, which includes the metadata information for each text. You may start with a data frame you get from summary(corp_tw) and then create two additional columns—President and Year, which can be extracted from the text filenames in the Text column. Hint: tidyr::extract() summary(corp_tw) %&gt;% as_tibble After you create the metadata DF, please assign it to the docvars(corp_tw) for later analysis. Exercise 13.4 Please create a lexical density plot for the use of “台灣/臺灣”in all presidents’ texts. Exercise 13.5 Please create a word cloud of the entire corpus corp_tw. In the word cloud, please remove punctuations, numbers, and symbols. The word cloud has to only include words whose frequency &gt;= 20. Exercise 13.6 Create word clouds showing the comparison of President Tsai (蔡英文), Ma (馬英九), and Shuibian Chen (陳水扁). Exercise 13.7 Please create a keyness plot, showing the preferred words used by President Tsai (蔡英文) vs. President Ma (馬英九). Exercise 13.8 Divide the corpus into two groups: Pan Blue (e.g., “蔣中正”, “蔣經國”, “李登輝”, “馬英九”) and Pan Green (the remaining presidents). Identify key collocations within each group and visualize them in a plot as described below. In the plot: The x-axis represents the frequency count of the collocation. The y-axis represents the collocation’s z-score, indicating lexical association. To determine “key collocations,” for each group, include only those that meet the following criteria: Consisting of no stopwords (stopwords(\"zh\", source=\"misc\")). A minimum frequency count (min_count) of 10. A z-score (z) of at least 3.29 (p &lt; .0001). "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
