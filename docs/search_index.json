[["data-import.html", "Chapter 10 Data Import 10.1 Overview 10.2 Importing Data 10.3 What is a CSV file? (Self-study) 10.4 Character Encoding (Self-study) 10.5 Character, Code Point, and Hexadecimal Mode (Self-study) 10.6 R Base Functions 10.7 readr Functions 10.8 Directory Operations", " Chapter 10 Data Import Most of the time, we need to work with our own data. In this chapter, we will learn the fundamental concepts and techniques in data I/O (input/output). In particular, we have two main objectives: Learn how to load our data in R from external files Learn how to save our data in R to external files 10.1 Overview There are two major file types that data analysts often work with: txt and csv files. Following the spirit of tidy structure, we will introduce the package, readr, which is also part of the tidyverse. This package provides several useful functions for R users to load their data efficiently from plain-text files. In particular, we will introduce the most effective functions: read_csv() and write_csv() for the loading of CSV files. 10.2 Importing Data Figure 10.1: Data I/O 10.3 What is a CSV file? (Self-study) A CSV is a comma-separated values file, which allows data to be saved in a tabular format. CSVs look like a spreadsheet but with a .csv extension. A CSV file has a fairly simple structure. It’s a list of data separated by commas. For example, let’s say you have a few contacts in a contact manager, and you export them as a CSV file. You’d get a file containing texts like this: Name,Email,Phone Number,Address Bob Smith,bob@example.com,123-456-7890,123 Fake Street Mike Jones,mike@example.com,098-765-4321,321 Fake Avenue CSV files can be easily viewed with any of the text editors (e.g., Notepad++, TextEdit), or spreadsheet programs, such as Microsoft Excel or Google Spreadsheets. But you can only have one single sheet in a file and all data are kept as normal texts in the file. 10.3.1 Why are .CSV files used? There are several advantages of using CSV files for data exchange: CSV files are plain-text files, making them easier for the developer to create Since they’re plain text, they’re easier to import into a spreadsheet or another storage database, regardless of the specific software you’re using To better organize large amounts of data 10.3.2 How do I save CSV files? Saving CSV files is relatively easy. You just need to know where to change the file type. With a normal spreadsheet application (e.g., MS Excel), under the “File” section in the “Save As” tab, you can select it and change default file extension to \"CSV (Comma delimited) (*.csv)\". Although people mostly use the comma character to separate (or delimit) data, sometimes people use other characters like the tab, i.e., \\t. Therefore, sometimes people use the file extension TSV to indicate that the tabular data in the file are delimited by tab (indicating the column boundaries). Please also note that all these tabular files can be named with the extension .txt as well. However, a more intuitive file extension is definitely better for data management. 10.3.3 What about other types of data? In data analysis, we sometimes may need to deal with some other types of data files in addition to the plain-texts. For the import/export of other types of data, R also has specific packages designed for them: haven - SPSS, Stata, and SAS files readxl - excel files (.xls and .xlsx) DBI - databases jsonlite - json xml2 - XML httr - Web APIs rvest - HTML (Web Scraping) readtext - large text data (corpus) 10.4 Character Encoding (Self-study) Before we move on to the functions for data I/O, I would like to talk about the issues of character encoding. For all characters in languages, computers use numbers like 1 and 0 to encode all these characters. The more characters a language has, the more numbers are needed in the encoding. For example, for an English text, it usually consists of only Latin alphabets, and limited sets of essential numbers and punctuation marks. A 7-bit encoding scheme is enough to cover all the possible characters in English. The 7-bit encoding gives us the maximum of 128 (27 = 128) possible different characters to encode: each coding number corresponds to one unique character. The ASCII (American Standard Code for Information Interchange) encoding, a 7-bit character encoding developed from telegraph code, is a well-known encoding for English texts. 10.4.1 Problems with ASCII Many languages have more characters German umlauts (über) Accents in Indo-European Languages (déjà) Asciification/Romanization ASCII equivalents were defined for foreign characters that have not been included in the original character set Indo-European languages developed extended verions of ASCII 10.4.2 From 7-bit to One-Byte Encoding Single byte (8-bit) encoding Reserve the first 128 characters for ASCII characters 8-bit allows at most 256 possibilities ISO-8859-1 Encoding 10.4.3 Problems with Single-Byte Encoding Inconsistency A large number of overlapping character sets for encoding characters in different languages Often more than one symbol maps to the same code point/number Compatibility Still can’t deal with writing systems with large character sets (CKJ languages) Two-byte character sets Represent up to 65,536 distinct characters (216 = 65536) Multiple byte encoding Big-5 encoding for traditional Chinese GB encoding for simplified Chinese 10.4.4 Problems with Multi-byte Encoding Different languages still use different encodings Some are single-byte, while some are multiple-byte Digital texts usually have many writing systems single-byte texts, letters, spaces, punctuations, Arabic numerals Interspersed with 2-byte Chinese characters Problems Inconsistency in the byte-encoding number Compatibility across different languages 10.4.5 Unicode and UTF-8 Objective Seek to eliminate this character set ambiguity by specifying a Universal Character Set Including over 100,000 distinct coded characters Used in all the common writing systems today UTF-8 Each character is coded by a one to four byte encoding ASCII characters require 1 byte in UTF-8 (0-127) ISO-8859 characters require 2 bytes in UTF-8 (128-2,047) CKJ characters require 3 bytes in UTF-8 (2,048-65,535) Rare characters require 4 bytes in UTF-8 (65,536-1,112,064) Strengths Encodes text in any language Encodes characters in variable-length character encoding Encodes characters with no overlap or confusion between conflicting bytes ranges THE standard encoding now Web page, XML, JSON for data transmission 10.4.6 Suggestions Always use the UTF-8 when you create your dataset Always check the encoding of the dataset When loading the dataset, always specify the encoding of the file Be very careful of the default encoding used in the applications from which the dataset is created/collected/edited (e.g., MS-Word, MS-Excel, Praat, SPSS etc.) In Mac/Linux, the default encoding for files is UTF-8; in Windows, it is NOT. Be very careful if you are a Windows user. 10.5 Character, Code Point, and Hexadecimal Mode (Self-study) Character: A minimal unit of text that has semantic value in the language (cf. morpheme vs. grapheme) Code Point: Any legal numeric value in the character encoding set Hexadecimal: A positional system that represents numbers using a base of 16. In R, there are a few base functions that work with these concepts: Encoding(): Read or set the declared encodings for a character vector iconv(): Convert a character vector between encodings utf8ToInt(): Convert a UTF-8 encoded character to integers (code number in decimals) as.hexamode(): Convert numbers into Hexadecimals x1 &lt;- &quot;Q&quot; Encoding(x1) [1] &quot;unknown&quot; ## Convert the encoding to UTF-8 x2 &lt;- iconv(x1, to = &quot;UTF-8&quot;) Encoding(x2) # ASCII chars are never marked with a declared encoding [1] &quot;unknown&quot; x1_decimal &lt;- utf8ToInt(x1) x1_decimal # code point of `Q` [1] 81 x1_hex &lt;- as.hexmode(x1_decimal) x1_hex # code point in hexadecimal mode of `Q` [1] &quot;51&quot; We can represent characters in UTF-8 code point (hexadecimals) by using the escape \"\\u....\": print(&quot;\\u51&quot;) [1] &quot;Q&quot; The following is an example of a Chinese character. y1 &lt;- &quot;臺&quot; Encoding(y1) # Non-ASCII char encoding in R. What&#39;s the output in Windows? [1] &quot;UTF-8&quot; y1_decimal&lt;- utf8ToInt(y1) y1_decimal [1] 33274 y1_hex&lt;-as.hexmode(y1_decimal) y1_hex [1] &quot;81fa&quot; print(&quot;\\u81fa&quot;) [1] &quot;臺&quot; Exercise 10.1 What is the character of the Unicode code point (hexadecimal) U+20AC? How do you find out the character in R? Exercise 10.2 What is the Unicode code point (hexadecimal) for the character 我 and 你? Which character is larger in terms of the code points? Hexadecimal numerals are widely used by computer system designers and programmers, as they provide a human-friendly representation of binary-coded values. One single byte can encode 256 different characters, whose values may range from 00000000 to 11111111 in binary form. These binary forms can be represented as 00 to FF in hexadecimal. 10.6 R Base Functions 10.6.1 readLines() As we are often dealing with text data, we may need to import text files in R for further data processing. In R, there is a base function readLines(), which reads a txt file with the line breaks as the delimiter and returns the content of the file as a (character) vector. That is, each line in the text will be one element in the vector. alice &lt;- readLines(con = &quot;demo_data/corp-alice.txt&quot; ) alice[1:10] [1] &quot;[Alice&#39;s Adventures in Wonderland by Lewis Carroll 1865]&quot; [2] &quot;&quot; [3] &quot;CHAPTER I. Down the Rabbit-Hole&quot; [4] &quot;&quot; [5] &quot;Alice was beginning to get very tired of sitting by her sister on the&quot; [6] &quot;bank, and of having nothing to do: once or twice she had peeped into the&quot; [7] &quot;book her sister was reading, but it had no pictures or conversations in&quot; [8] &quot;it, &#39;and what is the use of a book,&#39; thought Alice &#39;without pictures or&quot; [9] &quot;conversation?&#39;&quot; [10] &quot;&quot; class(alice) [1] &quot;character&quot; length(alice) [1] 3331 Depending on how you arrange the contents in the text file, you may sometimes get a vector of different types: If each paragraph in the text file is a word, you get a word-based vector. If each paragraph in the text file is a sentence, you get a sentence-based vector. If each paragraph in the text file is a paragraph, you get a paragraph-based vector. Exercise 10.3 Based on the inspection of the vector alice created above, what is the content of each line in the original txt file (demo_data/corp-alice.txt)? If you need to import text files with specific encoding (e.g., big-5, utf-8, ISO8859-1), the recommended method is as follows: infile &lt;- file(description = &quot;demo_data/data-chinese-poem-big5.txt&quot;, encoding = &quot;big-5&quot;) ## file as a connection text_ch_big5 &lt;- readLines(infile) ## read texts from the connection close(infile) ## close the connection writeLines(text_ch_big5) 春 眠 不 覺 曉 ， 處 處 聞 啼 鳥 。 夜 來 風 雨 聲 ， 花 落 知 多 少 。 infile &lt;- file(description = &quot;demo_data/data-chinese-poem-utf8.txt&quot;, encoding = &quot;utf-8&quot;) text_ch_big5 &lt;- readLines(infile) close(infile) writeLines(text_ch_big5) 春 眠 不 覺 曉 ， 處 處 聞 啼 鳥 。 夜 來 風 雨 聲 ， 花 落 知 多 少 。 You can play with the following methods of loading the text files into R. Like I said, the above method is always recommended. It seems that the encoding settings within the readlines() or other R-native data loading functions (e.g., scan()) do not always work properly. (This is due to the variation of the operation systems and also the default locale of the OS.) x &lt;- readLines(&quot;demo_data/data-chinese-poem-big5.txt&quot;, encoding=&quot;big-5&quot;) y &lt;- scan(&quot;demo_data/data-chinese-poem-big5.txt&quot;, what=&quot;c&quot;,sep=&quot;\\n&quot;, encoding=&quot;big-5&quot;) y1 &lt;- scan(&quot;demo_data/data-chinese-poem-big5.txt&quot;, what=&quot;c&quot;,sep=&quot;\\n&quot;, fileEncoding=&quot;big-5&quot;) ## The input texts do not show up properly? writeLines(x) writeLines(y) writeLines(y1) ## convert the input texts into your system default encoding writeLines(iconv(x, from=&quot;big-5&quot;,to=&quot;utf-8&quot;)) writeLines(iconv(y, from=&quot;big-5&quot;, to=&quot;utf-8&quot;)) 10.6.2 writeLines() After processing the data in R, we often need to save our data in an external file for future reference. For text data, we can use the base function writeLines() to save a character vector. By default, each element will be delimited by a line break after it is exported to the file. output &lt;- sample(alice[nzchar(alice)],10) writeLines(output, con = &quot;corp-alice-2.txt&quot;) Please note that when you writeLines(), you may also need to pay attention to the default encoding of the output file. This is especially important for Windows users. I think R will use the system default encoding as the expected encoding of the output file. For Mac, it’s UTF-8, which is perfect. However, for Windows, it is NOT. It depends on your OS language. Can you try to do the following and check the encoding of the output file? x &lt;- &quot;鳳凰臺上鳳凰遊，鳳去臺空江自流。&quot; Encoding(x) # `iconvlist()` check all encodings [1] &quot;UTF-8&quot; ## For Mac Users, we can output files in different encodings as follows. ## method1 writeLines(x, con = &quot;output_test_1.txt&quot;) ## method2 con &lt;- file(description = &quot;output_test_2.txt&quot;, encoding=&quot;big-5&quot;) writeLines(x, con) close(con) ## method3 con &lt;- file(description = &quot;output_test_3.txt&quot;, encoding=&quot;utf-8&quot;) writeLines(x, con) close(con) ## For Windows Users, please try the following? x_big5 &lt;- iconv(x, from=&quot;utf-8&quot;, to = &quot;big-5&quot;) writeLines(x, con = &quot;output_test_w_1.txt&quot;, useBytes = TRUE) writeLines(x_big5, con = &quot;output_test_w_2.txt&quot;, useBytes = TRUE) It is said that writeLines() will attempt to re-encode the provided text to the native encoding of the system. This works fine when the system default is UTF-8. But in Windows, the default is NOT UTF-8. I can’t say I fully understand how the encoding system works with Windows. If you would like to know more about this, please refer to this article: String Encoding and R. Exercise 10.4 Please describe the meaning of the data processing in the code chunk above: sample(alice[nzchar(alice)],10). What did it do with the vector alice? Exercise 10.5 The above code is repeated below. How do you re-write the code using the %&gt;% pipe-based syntax with a structure provided below? Your output should be exactly the same as the output produced by the original codes. library(tidyverse) alice %&gt;% ... %&gt;% ... ... %&gt;% ... %&gt;% writeLiens(con=&quot;corp-alice-2.txt&quot;) Exercise 10.6 In our demo_data directory, there are three text files in different encodings: demo_data/chinese_gb2312.txt demo_data/chinese_big5.txt demo_data/chinese_utf8.txt Please figure out ways to load these files into R as vectors properly. All three files include the same texts: [1] &quot;這是中文字串。&quot; &quot;文本也有English Characters。&quot; The simplified Chinese version (i.e., chinese_gb2312.txt) [1] &quot;这是中文字串。&quot; &quot;文本也有English Characters。&quot; 10.7 readr Functions 10.7.1 readr::read_csv() Another common source of data is a spreadsheet-like tabular file, which corresponds to the data.frame in R. Usually we save these tabular data in a csv file, i.e., a comma-separated file. Although R has its own base functions for csv-files reading (e.g., read.table(), read.csv() etc.), here we will use the more powerful version read_csv() provided in the library of readr: library(readr) nobel &lt;- read_csv(&quot;demo_data/data-nobel-laureates.csv&quot;) nobel The csv file is in fact a normal plain-text file. Each line consists of a row data, with the columns separated by commas. Sometimes we may receive a data set with other self-defined characters as the delimiter. Another often-seen case is to use the tab as the delimiter. Files with tab as the delimiter are often with the extension tsv. In readr, we can use read_tsv() to read tsv files. gender_freq &lt;- read_tsv(file = &quot;demo_data/data-stats-f1-freq.tsv&quot;) gender_freq 10.7.2 readr::write_csv() In readr, we can also export our data frames to external files, using write_csv() or write_tsv(). Exercise 10.7 Load the plain-text csv file demo_data/data-bnc-bigram.csv into a data frame and print the top 20 bigrams in the R console arranged by their frequencies (i.e., bi.freq column). Exercise 10.8 Following Exercise 10.7, please export the data frame of the top 20 bigrams to an external file, named data-bnc-bigram-10.csv, and save it under your current working directory. 10.8 Directory Operations When we work with external files, we often need to deal with directories as well. Most importantly, we need to know both the paths and filenames of the external data in order to properly load the data into R. 10.8.1 Working Directory Whenever you start the RStudio, R will take a directory as the working directory. If you start RStudio with the app icon, Rstudio will take your system default directory as the working directory. If you start Rstudio by opening a specific R script, RStudio will take the script source file location as the working directory. 10.8.2 Relative vs. Absolute Paths There are two ways to tell R where your external file is. You can always specify the full path to your file: &quot;C:/Users/Alvin/Documents/ENC2055/demo_data/data-bnc-bigrams.csv&quot; However, it can be very troublesome if we need to specify the full paths all the time. The other alternative is to specify the relative path to the file in relation to the current working directory. That is, the file paths start with the working directory. By default, R will look for the file path from the working directory of the current R session. For example, in the following code, R will look for a file called data-bnc-bigram.csv under the working directory. If there is no such file, you will get an error message. x &lt;- read_csv(&quot;data-bnc-bigram.csv&quot;) In the following code, R will look for a sub-directory under the working directory called demo_data, and within the demo_data sub-directory, R will further look for the file data-bnc-bigram-csv. x &lt;- read_csv(&quot;demo_data/data-bnc-bigram.csv&quot;) In the following code, R will look for a file called data-bnc-bigram.csv from the parent directory of the working directory. x &lt;- read_csv(&quot;../data-bnc-bigram.csv&quot;) When using the relative path to specify file locations, the .. signifies the parent directory of the current working directory. People sometimes use the . to refer to the current working directory. 10.8.3 Directory Operations There are a few important directory operations that we often need when working with files (import/export): getwd(): check the working directory of the current R session setwd(): set the working directory for the current R session getwd() setwd() By default, R looks for the filename or the path under the working directory unless the absolute/relative path to the files/directories is particularly specified. dir(path = &quot;demo_data&quot;, full.names = FALSE, recursive = FALSE) file.exists(&quot;demo_data/data-bnc-bigram.csv&quot;) dir(path = &quot;../../&quot;) A common scenario is that we often need to load all the files from a specific directory. This usually requires a few steps: First, we need to get a list of the filenames included in the directory. Then we need to load the data of each file into R based on the filenames. Please download the four text files from demo_data/shapespeare for the following example. ## Get the filenames from the directory flist &lt;- dir(&quot;demo_data/shakespeare/&quot;, full.names = TRUE) flist [1] &quot;demo_data/shakespeare//Hamlet, Prince of Denmark.txt&quot; [2] &quot;demo_data/shakespeare//King Lear.txt&quot; [3] &quot;demo_data/shakespeare//Macbeth.txt&quot; [4] &quot;demo_data/shakespeare//Othello, the Moor of Venice.txt&quot; ## Holder flist_texts &lt;- list() ## Traverse each file for (i in 1:length(flist)) { flist_texts[[i]] &lt;- readLines(flist[i]) } ## First 50 lines of Text 1 flist_texts[[1]][1:50] [1] &quot;&lt; Shakespeare -- HAMLET, PRINCE OF DENMARK &gt;&quot; [2] &quot;&lt; from Online Library of Liberty (http://oll.libertyfund.org) &gt;&quot; [3] &quot;&lt; Unicode .txt version by Mike Scott (http://www.lexically.net) &gt;&quot; [4] &quot;&lt; from \\&quot;The Complete Works of William Shakespeare\\&quot; &gt;&quot; [5] &quot;&lt; ed. with a glossary by W.J. Craig M.A. &gt;&quot; [6] &quot;&lt; (London: Oxford University Press, 1916) &gt;&quot; [7] &quot;\\tGhost of Hamlet&#39;s Father.&quot; [8] &quot;&lt;STAGE DIR&gt;&quot; [9] &quot;&lt;Scene.—Elsinore.&gt;&quot; [10] &quot;&lt;/STAGE DIR&gt;&quot; [11] &quot;&quot; [12] &quot;&quot; [13] &quot;&lt;ACT 1&gt;&quot; [14] &quot;&quot; [15] &quot;&quot; [16] &quot;&lt;SCENE 1&gt;&quot; [17] &quot;&lt;Elsinore. A Platform before the Castle.&gt;&quot; [18] &quot;&lt;STAGE DIR&gt;&quot; [19] &quot;&lt;Francisco at his post. Enter to him Bernardo.&gt;&quot; [20] &quot;&lt;/STAGE DIR&gt;&quot; [21] &quot;&lt;BERNARDO&gt;\\t&lt;0%&gt;&quot; [22] &quot;\\tWho&#39;s there?&quot; [23] &quot;&lt;/BERNARDO&gt;&quot; [24] &quot;&quot; [25] &quot;&lt;FRANCISCO&gt;\\t&lt;0%&gt;&quot; [26] &quot;\\tNay, answer me; stand, and unfold yourself.&quot; [27] &quot;&lt;/FRANCISCO&gt;&quot; [28] &quot;&quot; [29] &quot;&lt;BERNARDO&gt;\\t&lt;0%&gt;&quot; [30] &quot;\\tLong live the king!&quot; [31] &quot;&lt;/BERNARDO&gt;&quot; [32] &quot;&quot; [33] &quot;&lt;FRANCISCO&gt;\\t&lt;0%&gt;&quot; [34] &quot;\\tBernardo?&quot; [35] &quot;&lt;/FRANCISCO&gt;&quot; [36] &quot;&quot; [37] &quot;&lt;BERNARDO&gt;\\t&lt;0%&gt;&quot; [38] &quot;\\tHe.&quot; [39] &quot;&lt;/BERNARDO&gt;&quot; [40] &quot;&quot; [41] &quot;&lt;FRANCISCO&gt;\\t&lt;0%&gt;&quot; [42] &quot;\\tYou come most carefully upon your hour.&quot; [43] &quot;&lt;/FRANCISCO&gt;&quot; [44] &quot;&quot; [45] &quot;&lt;BERNARDO&gt;\\t&lt;0%&gt;&quot; [46] &quot;\\t&#39;Tis now struck twelve; get thee to bed, Francisco.&quot; [47] &quot;&lt;/BERNARDO&gt;&quot; [48] &quot;&quot; [49] &quot;&lt;FRANCISCO&gt;\\t&lt;0%&gt;&quot; [50] &quot;\\tFor this relief much thanks; &#39;tis bitter cold,&quot; Exercise 10.9 Please make yourself familar with the following commands: file.create(), dir.create(), unlink(), basename(),file.info(), save(), and load(). Exercise 10.10 Please create a sub-directory in your working directory, named temp. Load the dataset demo_data/data-bnc-bigram.csv and subset bigrams whose bigram frequencies (bi.freq column) are larger than 200. Order the sub data frame according to the bigram frequencies in a descending order and save the sub data frame into a csv file named data-bnc-bigram-freq200.csv in the temp directory. bnc_bigram_freq200 &lt;- read_csv(&quot;temp/data-bnc-bigram-freq200.csv&quot;) bnc_bigram_freq200 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
