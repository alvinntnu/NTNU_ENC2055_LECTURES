[
["data-manipulation.html", "Chapter 6 Data Manipulation 6.1 Dataset 6.2 rename() 6.3 Pipe %&gt;% 6.4 mutate() 6.5 select() 6.6 filter() 6.7 arrange() 6.8 group_by() and summarize() 6.9 count() 6.10 Exerceises", " Chapter 6 Data Manipulation In this chapter, we will be working with a powerful package, dplyr, which provides a consistent “grammar” for data manipulation and exploration by simplifying operations on data frames to a great deal. We first load the library: library(dplyr) In this library, there are a list of key verbs: %&gt;%: the “pipe” operator is used to connect multiple verb actions together into a pipeline mutate(): add new variables/columns or transform existing variables select(): return a subset of the columns of a data frame, using a flexible notation filter(): extract a subset of rows from a data frame based on logical conditions summarise(): generate summary statistics of different variables in the data frame, possibly within strata group_by(): group the data frame into sub-tables according to a grouping factor arrange(): reorder rows of a data frame (according to a particular variable) rename(): rename variables in a data frame Several usueful functions for joining two data frames: inner_join() left_join() right_join() full_join() anti_join() Exercise 6.1 Please check the documentations of all the above functions of merging data frames and make sure you understand how two data frames are merged for each function. 6.1 Dataset The dateaset we use in this chapter is a student performance dataset from kaggle. library(readr) student &lt;- read_csv(&quot;demo_data/data-students-performance.csv&quot;) student Usually we would start from an overview of the dataset, using summary(): summary(student) ## gender race/ethnicity parental level of education ## Length:1000 Length:1000 Length:1000 ## Class :character Class :character Class :character ## Mode :character Mode :character Mode :character ## ## ## ## lunch test preparation course math score reading score ## Length:1000 Length:1000 Min. : 0.00 Min. : 17.00 ## Class :character Class :character 1st Qu.: 57.00 1st Qu.: 59.00 ## Mode :character Mode :character Median : 66.00 Median : 70.00 ## Mean : 66.09 Mean : 69.17 ## 3rd Qu.: 77.00 3rd Qu.: 79.00 ## Max. :100.00 Max. :100.00 ## writing score ## Min. : 10.00 ## 1st Qu.: 57.75 ## Median : 69.00 ## Mean : 68.05 ## 3rd Qu.: 79.00 ## Max. :100.00 6.2 rename() The column names in student are a mess. These names include spaces in them, which would be difficult to index these columns in R. This is however normal in the real world, where the dataset we get is often very messy. So, the first thing we can do with the dataset is the rename all the column names in a R-compatible way. rename(student, race = `race/ethnicity`, parent_edu = `parental level of education`, prep_course = `test preparation course`, math = `math score`, reading = `reading score`, writing = `writing score`) -&gt; student1 student1 Please note that in our earlier code, we save the output of rename() to a new object named student1. In other words, the object student1 should contain a new data frame with all column names fixed as above. 6.3 Pipe %&gt;% Now let’s look at a fantastic syntax in R, the pipe %&gt;%, which is definitely one of my favorite R idioms! To start with, the following two expressions are the same, giving you the same results: sum(c(1:10)) ## [1] 55 c(1:10) %&gt;% sum ## [1] 55 The meaning of %&gt;% is that the object on the left of the pipe is passed on to the right side of the pipe for further processing. By default, the object is passed onto to be the first argument of the function on the right-hand side. This pipe-based syntax would render the script more reader-friendly. For example, it is difficult to conceptualize the following code with several layers of embedding structures. sqrt(sum(abs(c(-10:10)))) ## [1] 10.48809 But the above code can be re-written with the %&gt;% as follows: c(-10:10) %&gt;% # create a vector abs %&gt;% # take each element&#39;s absolute value sum %&gt;% # sum all elements sqrt # take the square root of the sum ## [1] 10.48809 Now we understand the idiomatic expression of %&gt;%, our earlier rename() can be re-written as follows as well (cf. student1 and student1a): student %&gt;% rename(race = `race/ethnicity`, parent_edu = `parental level of education`, prep_course = `test preparation course`, math = `math score`, reading = `reading score`, writing = `writing score`) -&gt; student1a student1a From now on, we will use the pipe-based syntax more often. 6.4 mutate() Now imagine that you would like to create a new variable called final_grade, which is a weighted average of the student’s academic performance. Let us assume that you have the following weights in mind: math (50%), reading (25%), writing (25%). You can use mutate() to create a new column (i.e., variable) in your data frame: student1 %&gt;% mutate(final_grade = math*0.5 + reading*0.25 + writing*0.25) We can create more than one new variables as well: student1 %&gt;% mutate(language = reading*0.5 + writing*0.5, final_grade = math + language) In the above practices of mutate(), we did not save the output of mutate() to a new object name. We only print the output directly to the console. In order words, the original data frame is still the same (i.e., student, student1); no new variables have been created with respect to these original data frames. 6.5 select() select() is to select particular columns of the data frame that you would like to focus on. You can select just one column student1 %&gt;% select(math) Or multiple columns: student1 %&gt;% select(math, reading, writing) Or columns within a range: student1 %&gt;% select(math:writing) You can also omit variables using select() student1 %&gt;% select(-c(race:lunch)) 6.6 filter() While select() is for columns, filter() is for rows. You can extract subsets of rows from a data frame. Most importantly, you can extract rows according to self-defined conditions. one logical condition student1 %&gt;% filter(math &gt; 90) AND &amp; conditions: student1 %&gt;% filter(math &lt; 40 &amp; reading &lt; 40) OR | conditions: student1 %&gt;% filter(math &lt; 40 | reading &lt; 40) XOR xor conditions: student1 %&gt;% filter(xor(math &lt; 40, reading &lt; 40)) Exercise 6.2 Please check the row numbers of the above three filtered data frames. Any connection? Please check Chapter 4.1 Vector for more logical operations. 6.7 arrange() We can arrange the rows of the data frame according to a particular variable. student1 %&gt;% arrange(math) By default, R will arrange the rows in an ascending order. If you like to arrange your data in a descending order, put a desc() around your variable name: student1 %&gt;% arrange(desc(math)) 6.8 group_by() and summarize() The group_by() function is used to generate summary statistics from the data frame within strata defined by a grouping variable. For example, in this student1 dataset, you might want to know what the average math scores are for students of different genders. In conjunction with the group_by() function we often use the summarize() function to create the summarized statistics for each subgroup (i.e., male and female). Two important steps: Split the big data frame into smaller sub data frames according to a grouping factor/variable (group_by()) Summarize each sub data frame with respect to specific parameters (summarize()) student1 %&gt;% group_by(gender) %&gt;% summarize(math_average = mean(math), math_median = median(math), math_sd = sd(math)) 6.9 count() One of the most-often used feature when we have data frames is to tally the frequencies of the subjects according to some of the columns. The function count() is born for this. For example, we can create a frequency distribution of male and female students of different parental levels of education (i.e., parent_edu x gender contingency table): student1 %&gt;% count(parent_edu, gender) Exercise 6.3 Continuing the above example, how can you create another column, which includes the percentage of male and female students for those of the same parental level education (see below)? 6.10 Exerceises Exercise 6.4 In the dataset demo_data/data-students-performance.csv, please load the dataset in R and print out those students who are female and whose math scores are &lt; 40. In your output, please show the following columns only: gender, math. Exercise 6.5 With the same dataset, please compute the mean scores and standard deviations of math for different races. Also, please include the number of students for each race sub-group. Exercise 6.6 With the same dataset, please create a summary data frame, which includes the number of students, math mean scores, math standard deviations, for students of different genders and parental education levels. Exercise 6.7 In terms of Parental Education Levels (i.e., parent_edu), it would be better to be coded as an ordered factor. Can you tranform the variable parent_edu into a ordered factor and regenerate the outputs requested in Exercise 6.6. Let us assume that the factor parent_edu follow the following order: some high school &lt; high school &lt; some college &lt; associate's degree &lt; bachelor's degree &lt; master's degree Exercise 6.8 Have you any ideas how to generate the following graphs using ggplot2()? "]
]
