[["conditions-and-loops.html", "Chapter 5 Conditions and Loops 5.1 Conditions 5.2 if Statements 5.3 for 5.4 while loop 5.5 Toy Example", " Chapter 5 Conditions and Loops When you start to write more sophisticated programs with R, you will very often need to control the flow and order the execution in your code. You will usually run into two types of scenarios: Make the execution of a particular code chunk dependent on a condition (i.e., an expression that evaluates to TRUE or FALSE) Repeat a particular code chunk a certain number of times, which is often referred to as loops. In this Chapter, we will explore these core programming techniques using: if-else statements for and while loops However, in Chapter 11, we will talk about loops more and point you to the idiomatic ways of dealing with loops in R. 5.1 Conditions Before we talk about the flow controls, let’s deal with the more fundamental element of the control structures: what is a condition? To that end, let’s first explore a few important concepts: Boolean Values Comparison Operators Boolean Operators 5.1.1 Boolean Values Unlike numbers or characters, the Boolean data type has only two values, TRUE and FALSE. In R, the Boolean values TRUE and FALSE lack the quotes you place around strings, and they are always uppercase. cond1 &lt;- TRUE class(cond1) [1] &quot;logical&quot; 5.1.2 Comparison Operators Comparison Operators are important in programming. They compare two values and evaluate down to a single Boolean value. They are also referred to as relational operators. Comparison Operators in R Operator Meaning == Equal to != Not equal to &gt; Greater than &lt; Less than &gt;= Greater than or equal to &lt;= Less than or equal to X %in% Y X Is an member of Y These comparison operators return TRUE or FALSE depending on the values we give them. 45 == 45 [1] TRUE 45 &gt; 50 [1] FALSE 45 != 4 [1] TRUE Please note that these operators work not only with numbers but also characters as well. a &lt;- &quot;run&quot; b &lt;- &quot;run&quot; c &lt;- &quot;walk&quot; all &lt;- c(&quot;run&quot;,&quot;walk&quot;,&quot;march&quot;) a == b [1] TRUE a == c [1] FALSE c %in% all [1] TRUE When using comparison operators, be careful of the data types (i.e., numeric or character). a &lt;- &quot;42&quot; b &lt;- 42 a == 42.0 [1] TRUE a &gt; 40 [1] TRUE a == b [1] TRUE Please note the difference between == and =. The == operator asks whether two objects are the same as each other while the = operator assigns the value/object on the right into the variable name on the left. In R, the preferred way of assigment is to use &lt;- operator instead. 5.1.3 Boolean Operators There are three Boolean operators in R to compare two conditions: &amp; (and), | (or), and ! (not). That is, we can combine two or more conditions with these operators for more complex conditions. x &lt;- 47 x &gt; 30 | x &lt; 50 [1] TRUE x &lt;- 55 x &gt; 30 &amp; x &lt; 50 [1] FALSE x &lt;- 55 x &gt; 50 [1] TRUE !x &gt; 50 [1] FALSE 2 + 2 == 4 &amp; 2 + 2 == 5 &amp; 2 * 2 == 2 + 2 [1] FALSE 2 + 2 == 4 &amp; !2 + 2 == 5 &amp; 2 * 2 == 2 + 2 [1] TRUE The Boolean operators follow the order of operations in math. That is, R evaluates the ! (not) operator first, then the &amp; (and) operator, and then the | (or) operators. 5.1.4 Elements of Flow Control Flow control statements often start with a condition and are followed by a block of code. Conditions: Any Boolean expressions can be a potential condition, which evaluates down to a Boolean value (i.e., TRUE or FALSE). A flow control statement decides what to to and what to skip based on whether the condition is TRUE or FALSE. Block of Code: Lines of R code can be grouped together in blocks, using initial and ending curely brackets { and }. The beginning and ending of the block of code are clearly indicated. 5.2 if Statements The main purpose of if is to control precisely which operations are carried out in a given code chunk. A if statement runs a code chunk only if a certain condition is true. This conditional expression allows R to respond differently depending on whether the condition is TRUE or FALSE. The basic template of if is as follows: if(CONDITION IS TRUE){ DO THIS CODE CHUNK 1 } else { DO THIS CODE CHUNK 2 } The condition is palced in the parenthesis after if. The condition must be an expression that returns only a single logical value (TRUE or FALSE). If it is TRUE, the code chunk 1 in the braces will be executed; if the condition is not satisfied, the code chunk 2 in the braces after else will be executed. Let’s create a simple password checker. Imagine that your system password is stored on the server. You can only get into the system if you enter the correct password. For every password you enter, the system gatekeeper will check if your input password matches the one stored on the server. If they don’t match, you will be banned from entry. input &lt;- 113 # assuming that you have the input 113 if(input == 987){ writeLines(&quot;Congratulations! Now you may get in!&quot;) } else{ writeLines(&quot;Sorry! Wrong password.&quot;) } Sorry! Wrong password. If they match, you will be allowed to get through. input &lt;- 987 # assuming that you have the input 113 if(input == 987){ writeLines(&quot;Congratulations! Now you may get in!&quot;) } else{ writeLines(&quot;Sorry! Wrong password.&quot;) } Congratulations! Now you may get in! Now we can ask R to read the input directly from the user’s input in the R console: input &lt;- readline(prompt=&quot;Please enter your password:&quot;) if(input == 987){ writeLines(&quot;Congratulations! Now you may get in!&quot;) } else{ writeLines(&quot;Sorry! Wrong password.&quot;) } 5.3 for The for loop statment is to repeat a code chunk, often while incrementing an index or counter. The most frequent scenario is to repeat a code chunk through a vector/list, element by element, or through a data frame row by row (or column by column). The basic for loop template is as follows: for(LOOP_INDEX in LOOP_VECTOR){ DO THIS CODE CHUNK } The LOOP_INDEX is a placeholder that represents an element in the LOOP_VECTOR. When the loop begins, the LOOP_INDEX starts off as the first element in the vector. When the loop reaches the end of the brace, the LOOP_INDEX is incremented, taking on the next element in the vector. This process continues until the loop reaches the final element of the LOOP_VECTOR. At this point, the code chunk is executed for the last time, and the loop exits. For example, if we have a character vector with a few words in it. We can use a for loop to get the number of characters for each element in the vector. word_vec &lt;- c(&quot;apple&quot;,&quot;banana&quot;,&quot;watermelon&quot;,&quot;papaya&quot;) for(w in word_vec){ word_nchar &lt;- nchar(w) writeLines(as.character(word_nchar)) } 5 6 10 6 For the above example, there is another way to write the for loop: for(i in 1:length(word_vec)){ word_nchar &lt;- nchar(word_vec[i]) writeLines(as.character(word_nchar)) } 5 6 10 6 In our first example, the LOOP_INDEX directly represent elements in the LOOP_VECTOR. In our second example, the LOOP_INDEX represents indexes of the vector. 5.4 while loop There is another type of loop. Unlike the for loop, which repeats a code chunk by going through every element in a vector/list/data frame, the while loop repeats a code chunk UNTIL a specific condition evalutes to FALSE. The basic template is as follows: while(LOOP_CONDITION){ DO THIS CODE CHUNK (UNTIL THE LOOP_CONDITION BECOMES FALSE) } Upon the start of a while loop, the LOOP_CONDITION is evaluated. If the condition is TRUE, the braced code chunk is executed line by line till the end of the chunk. At this point, the LOOP_CONDITION will be checked again. The loop terminates immediately when the condition is evaluated to be FALSE. Based on the template above, you should infer that the code chunk executed must somehow cause the loop to exit, and very often will change the value of certain objects, which would eventaully lead to the change of the LOOP_CONDITION. If nothing ever changes the LOOP_CONDITION, R will crash due to the infinite loops. Let’s come back to our password checker. This time let’s create a dumb checker. When you give a wrong password which is smaller than your true answer, it will automatically approach the right asnwer for you (and of course no real-world application would do that!) ans &lt;- 90 guess &lt;- 83 while(guess != ans){ writeLines(&quot;Your `guess` is too small! The system will take care for you!&quot;) guess &lt;- guess + 1 cat(&quot;Now the system is adjusting your `guess` to &quot;, guess, &quot;\\n&quot;) } Your `guess` is too small! The system will take care for you! Now the system is adjusting your `guess` to 84 Your `guess` is too small! The system will take care for you! Now the system is adjusting your `guess` to 85 Your `guess` is too small! The system will take care for you! Now the system is adjusting your `guess` to 86 Your `guess` is too small! The system will take care for you! Now the system is adjusting your `guess` to 87 Your `guess` is too small! The system will take care for you! Now the system is adjusting your `guess` to 88 Your `guess` is too small! The system will take care for you! Now the system is adjusting your `guess` to 89 Your `guess` is too small! The system will take care for you! Now the system is adjusting your `guess` to 90 Exercise 5.1 In the above example, if the guess is smaller than ans, our script works fine. However, if the guess is larger than ans, then our script will crash. How to fix it? In other words, you script should produce the following results when guess (83) &lt; ans (90): Your `guess` is too small! The system will take care for you! Now the system is adjusting your `guess` to 84 Your `guess` is too small! The system will take care for you! Now the system is adjusting your `guess` to 85 Your `guess` is too small! The system will take care for you! Now the system is adjusting your `guess` to 86 Your `guess` is too small! The system will take care for you! Now the system is adjusting your `guess` to 87 Your `guess` is too small! The system will take care for you! Now the system is adjusting your `guess` to 88 Your `guess` is too small! The system will take care for you! Now the system is adjusting your `guess` to 89 Your `guess` is too small! The system will take care for you! Now the system is adjusting your `guess` to 90 And your script should produce the following results when guess (100) &gt; ans (90): Your `guess` is too large! The system will take care for you! Now the system is adjusting your `guess` to 99 Your `guess` is too large! The system will take care for you! Now the system is adjusting your `guess` to 98 Your `guess` is too large! The system will take care for you! Now the system is adjusting your `guess` to 97 Your `guess` is too large! The system will take care for you! Now the system is adjusting your `guess` to 96 Your `guess` is too large! The system will take care for you! Now the system is adjusting your `guess` to 95 Your `guess` is too large! The system will take care for you! Now the system is adjusting your `guess` to 94 Your `guess` is too large! The system will take care for you! Now the system is adjusting your `guess` to 93 Your `guess` is too large! The system will take care for you! Now the system is adjusting your `guess` to 92 Your `guess` is too large! The system will take care for you! Now the system is adjusting your `guess` to 91 Your `guess` is too large! The system will take care for you! Now the system is adjusting your `guess` to 90 5.5 Toy Example Now we are playing the Guess Game. The game is as follows: The program will pick a random number from 1 to 100. A user has to guess which number the computer has picked. Every time the user makes a wrong guess, the computer will tell him/her whether the correct answer is higher or lower. We first pack the game as an R function object: guessMyNumber &lt;- function(){ ans &lt;- sample(1:100, size = 1) print(&quot;Now I am thinking of a number between 1 and 100.&quot;) guess &lt;- readline(prompt = &quot;Please guess my number(0~100):&quot;) guess &lt;- as.numeric(guess) while(guess != ans){ if(guess &lt; ans){ writeLines(&quot;The asnwer is HIGHER.&quot;) guess &lt;- readline(prompt = &quot;Please guess my number(0~100):&quot;) guess &lt;- as.numeric(guess) }else{ writeLines(&quot;The asnwer is LOWER&quot;) guess &lt;- readline(prompt = &quot;Please guess my number(0~100):&quot;) guess &lt;- as.numeric(guess) } } writeLines(paste0(&quot;Good Job! You had the correct answer! My number is &quot;, guess)) } # endfunc You can play the game by running the function guessMyNumber(): guessMyNumber() Exercise 5.2 (optional) The above guessMyNumber() can be improved. Sometimes naughty users would not input numbers as requested. Instead, they may accidentally (or on purpose) enter characters that are NOT digits at all in their guesses. How can you adjust the guessMyNumber() so that when users enter non-numeric characters, your program will send out a warning message automatically? (See below.) &gt; guessMyNumber_v2() Please guess my number(0~100):12 The asnwer is HIGHER. Please guess my number(0~100):80 The asnwer is LOWER Please guess my number(0~100):1000 The asnwer is LOWER Please guess my number(0~100):a ****Please behave. Input an INTEGER!!!**** Please guess my number(0~100):f ****Please behave. Input an INTEGER!!!**** Please guess my number(0~100):grwf ****Please behave. Input an INTEGER!!!**** Please guess my number(0~100): "]]
