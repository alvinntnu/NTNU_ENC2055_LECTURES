[["iteration.html", "Chapter 11 Iteration 11.1 Code Duplication 11.2 Vectorized Functions: Vector vs. List 11.3 Iteration 11.4 purr 11.5 purr + dplyr 11.6 map() with self-defined functions", " Chapter 11 Iteration 11.1 Code Duplication Code duplication is a significant problem in programming that should be avoided whenever possible. When you notice repetitive code within your script, it is generally not an ideal situation. Repeating the same code in multiple places can lead to difficulties in maintaining and debugging your script. When the same code chunk is repeated in multiple places, it becomes challenging to track and update. If a bug is discovered or an improvement is needed, you have to make changes in every instance of the duplicated code, which is time-consuming and error-prone. It also makes the script harder to understand for other developers, as they have to navigate through redundant code segments. To mitigate these issues, it is advisable to refactor the duplicated code into reusable functions or modules. By encapsulating the common functionality in a single place, you can reduce redundancy and improve code maintainability. In short, there are generally two major ways to reduce duplication in coding: Wrap the duplicate procedures into a function Use iteration structure in script In this chapter, we will talk about code efficiency. In particular, we will work with the library purr. According to Wickham &amp; Grolemund (2017) Chapter 21 Iteration, there are three main advantages of reducing code duplication: It’s easier to see the intent/objective of your code, because your eyes are drawn to what’s different, not what stays the same. It’s easier to respond to changes required for code maintenance. Without much code duplication, you only need to make changes in one place, rather than remembering to change every place that you have copied-and-pasted the code. You’re likely to have fewer bugs because each line of code is used in a limited place. 11.2 Vectorized Functions: Vector vs. List Most of the R-internal functions are vectorized. By default, if we apply a function to a multi-element vector, R will automatically apply the same procedure to all elements of the vector all at once, and return the results of the same vector’s length. a.vec &lt;- c(1:10) ## `sqrt()` is applied to all elements of the vector one by one sqrt(a.vec) [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427 [9] 3.000000 3.162278 ## `round()` is applied to all elements of the vector one by one round(sqrt(a.vec), 2) [1] 1.00 1.41 1.73 2.00 2.24 2.45 2.65 2.83 3.00 3.16 The concept of a vectorized function in R is important here. A vectorized function is designed to operate on an entire vector (or multiple vectors) as a whole, performing the same operation on each element simultaneously. It leverages the internal optimizations in R to process the vector efficiently, resulting in faster and more concise code. But this is NOT something we can do with a list: a.list &lt;- list(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) sqrt(a.list) Error in sqrt(a.list): non-numeric argument to mathematical function You may now recall that in Chapter 5 , we have introduced the control structure of for-loop, which allows us to perform a specific procedure to every element of a list. a.list &lt;- list(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) results &lt;- vector() # empty list holder for(i in 1:length(a.list)){ results[i] &lt;- sqrt(a.list[[i]]) } results [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427 [9] 3.000000 3.162278 In this chapter, we will explore more efficient ways of iterating over non-vector objects such as lists and data frames. 11.3 Iteration Because we often work with list and data.frame (tibble) objects in R, it would be great if we can have a straightforward approach for performing the same procedure on: Each element in the list Each row in the data.frame Each column in the data.frame These three scenarios are the most-often used contexts for iteration (i.e., iterating over data structures). Let’s start with a example. We first create a pseudo data set, i.e., a list with students’ grades from five different classes. exams.list &lt;- list( class1 = round(runif(30, 0, 100)), # 30 tokens of random numbers in the range &lt;0, 100&gt; class2 = round(runif(30, 0, 100)), class3 = round(runif(30, 0, 100)), class4 = round(runif(30, 0, 100)), class5 = round(runif(30, 0, 100)) ) exams.list $class1 [1] 79 76 89 90 71 35 34 96 19 93 7 49 36 58 36 77 28 81 27 17 52 55 89 8 62 [26] 60 54 88 93 37 $class2 [1] 9 72 21 42 33 69 60 15 80 84 78 88 3 24 8 47 90 18 99 6 89 75 46 97 87 [26] 73 6 97 17 41 $class3 [1] 11 91 82 71 32 45 18 29 84 55 9 26 56 25 46 50 67 68 90 65 28 25 16 4 26 [26] 55 57 1 8 59 $class4 [1] 63 98 14 59 98 88 89 28 93 63 28 71 28 56 28 2 3 72 80 3 97 52 54 96 67 [26] 68 8 41 34 43 $class5 [1] 12 39 5 66 88 59 99 3 9 46 16 84 68 80 65 31 21 70 9 84 38 35 76 1 14 [26] 32 83 72 68 24 If we want to compute the mean scores of each cluster, you probably want to use mean(): mean(exams.list) [1] NA It should be clear now that mean() expects a numeric vector, on which the mean score is computed. So you might wonder, why not take a simple approach? We can calculate the mean scores for each class and store all five scores in a list: set.seed(123) # Make sure we get the same results exams.list.means &lt;- list( class1mean = mean(exams.list$class1), class2mean = mean(exams.list$class2), class3mean = mean(exams.list$class3), class4mean = mean(exams.list$class4), class5mean = mean(exams.list$class5) ) exams.list.means $class1mean [1] 56.53333 $class2mean [1] 52.46667 $class3mean [1] 43.3 $class4mean [1] 54.13333 $class5mean [1] 46.56667 The disadvantage is obvious: (a) what if you have 10 classes? 100 classes? (b) what if now you decide to compute standard deviation? The rule-of-thumb is that the more you find code duplication in your script, the more likely you need to restructure your codes with iterations. 11.4 purr library(tidyverse) Now let’s take a look at how iteration structures can help us with repeated procedures. map(exams.list, mean) $class1 [1] 56.53333 $class2 [1] 52.46667 $class3 [1] 43.3 $class4 [1] 54.13333 $class5 [1] 46.56667 ## Or, alternatively: # exams.list %&gt;% map(mean) With only one-line code, you can apply a function to each element of a data structure and obtain the results as a new data structure of the same type. It simplifies the process of applying a function iteratively and collecting the output at the same time. map() is a very powerful function to do iteration. Its usage is as follows: Let’s break down the code map(exams.list, mean) and explain it concisely: The map() function is used to apply the mean function to each element in the exams.list. The result of applying mean to the first element is stored as the first element in a new list. Similarly, the result of applying mean to the second element is stored as the second element in the new list. This process continues for each element in the exams.list. Finally, the function returns a list containing all the computed mean values. In the purrr package, the map() function defaults to returning the result as a list. However, you can use other variants of the mapping function, like map_dbl() for a double vector, map_int() for an integer vector, or map_chr() for a character vector, to specify a different output data structure. These variants allow you to tailor the output format based on your specific requirements. ## apply `mean()` to all elements of `exam.list` ## and return the output as data frame map_df(exams.list, mean) ## apply `mean()` to all elements of `exam.list` ## and return the output as a double/numeric vector map_dbl(exams.list, mean) class1 class2 class3 class4 class5 56.53333 52.46667 43.30000 54.13333 46.56667 In R, the apply() function, along with its variants like lapply() and sapply(), is a native R function used for applying a function to a specific data structure. These native R functions are very similar to map() in purrr library. Here’s a brief comparison between apply() and map() from the purrr library: apply(): It is primarily used with matrices or multidimensional arrays. It applies a function to either rows or columns of the matrix or array, aggregating the results. It is efficient for handling structured data and performing calculations across dimensions. lapply(): It applies a function to each element of a list or vector and returns a list of results. It is commonly used for iterative operations on lists and allows you to process each element individually. sapply(): It is similar to lapply() but simplifies the result by attempting to convert it into a more convenient format, such as a vector or matrix. It is useful when you want a simplified output and don’t necessarily need a list structure. map() (from purrr): It is part of the purrr library, which is an extension of the apply family of functions. map() provides a consistent and powerful approach to iterate over elements in various data structures, including lists, data frames, and vectors. It returns a list as the output, allowing you to work with the results in a flexible manner. In summary, while the native R functions like apply(), lapply(), and sapply() provide useful ways to iterate over data structures, map() from the purrr library offers additional flexibility and consistency when working with lists, data frames, and vectors. It is particularly beneficial when you need to apply a function to multiple elements and handle the results in a list format. Exercise 11.1 Use the same dataset, exam.list, and compute the median and standard deviation values for each class. Have these values returned as vectors. Median class1 class2 class3 class4 class5 56.5 53.5 45.5 57.5 42.5 Standard Deviation class1 class2 class3 class4 class5 27.75476 33.39908 26.88693 31.21199 30.60503 Exercise 11.2 Similar to the previous exercise, how can you use the same dataset, exam.list, to compute the median and standard deviation values for each class, and have both of these values returned as a data.frame (The first row refers to the median values and the second row refers to the standard deviation values.) Please use map_df() to produce the following expected result. 11.5 purr + dplyr When working with data frames in R, the map() function from the purrr library can be a powerful and efficient tool for data manipulation. When used in combination with the mutate() function from the dplyr package, it allows for seamless transformation of columns in a data frame. Specifically, in the context of data frame, map() can be used to apply a function to a column or a selected set of columns. Therefore, by combining map() with mutate(), we can efficiently apply a function to each column of a data frame and generate new columns based on the results. To illustrate this usage, let’s look at an example of the four-character idioms dataset from the previous chapter. ## reading utf8 file con &lt;- file(description = &quot;demo_data/dict-ch-idiom.txt&quot;, encoding = &quot;utf-8&quot;) texts &lt;- readLines(con) close(con) ## convert into data frame idiom &lt;- data.frame(string = texts) idiom Now if we would like to find out whether each idiom has duplicate characters in it, we can make use of regular expressions: ## Take a look at the first ten idioms x &lt;- idiom$string[1:10] ## Check whether they have repeated characters str_detect(x, &quot;.*(.).*\\\\1.*&quot;) [1] FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE TRUE FALSE What if we would like to include this information as an independent (new) column of data frame, idiom? Two important things should pop up in your mind: We need mutate() to help us create a new column We need to apply the above procedure, str_detect(), to each element in the column idiom$string. idiom %&gt;% mutate(duplicate = str_detect(string, &quot;.*(.).*\\\\1.*&quot;)) %&gt;% filter(duplicate) So far, we do not have to use map() because str_detect() is a vectorized function, i.e., when it takes a vector as its input, it performs the pattern matching for all the elements of the input string vector, and outputs a vector, which can be a perfect candidate for a new column. Now, what if we would like to identify idioms including animal characters and create a new column that shows the number of animal characters for these idioms? It is clear that we need to use str_extract_all() to extract all possible matches from each idiom. And it should also be clear that the output of str_extract_all() is a list. ## Regex patter for animal characters pat &lt;- &quot;[鼠牛虎兔龍蛇馬羊猴雞狗豬]&quot; ## Output of str_extract_all output &lt;- str_extract_all(idiom$string, pat) ## Example idiom[895,] [1] &quot;白馬非馬&quot; output[895] [[1]] [1] &quot;馬&quot; &quot;馬&quot; So now the question is: how can we get the information (i.e., the number of animal characters) from the output of str_extract_all() and add this information to the existing data frame as a new column? And the hint is clear: you need to make use of the iteration function: map(). See if you are able to produce an output as shown below using the code template provided: ## Code Template idiom %&gt;% mutate(animals = str_extract_all(......)) %&gt;% ## extract matches mutate(num_animal = map(......)) %&gt;% ## compute number of matches filter(......) %&gt;% ## remove idioms with no matches select(-animals) ## remove irrelevant columns Exercise 11.3 This exercise will use the subset of idiom, which include only four-word idioms with at least one duplicate character in them. Please create a new column, showing how many types of duplications there are in each idiom? For example, in 阿狗阿貓, there is only one duplicate character 阿; but in 矮矮胖胖, there are two duplicate characters, 矮 and 胖. Exercise 11.4 Continuing the previous exercise, please create another new column, showing all the duplicate characters in each idiom. For example, in 阿狗阿貓, the duplicate character is 阿; but in 矮矮胖胖, the duplicate character is矮_胖. That is, if the idiom has more than one duplicate character, please use the _ as the delimiter and concatenate all duplicate characters into a long string. Exercise 11.5 Based on the previous exercise, please analyze the distribution of all the duplicate characters in the four-character idioms included in the dictionary (i.e., the duplicate_char column from the previous exercise) and identify the top 20 duplicate characters. Please visualize your results in a bar plot with both the top 20 duplicate characters as well as the number of the character’s duplications in the idiom. 11.6 map() with self-defined functions With the power and flexibility of purrr::map(), we can basically do everything iteratively. More attractively, we can apply a self-defined function as well! (Please see Chapter 6 for how to create a self-defined function in R.) A function object is defined using the following template: FUNCTION_NAME &lt;- function(ARG1, ARG2) { THINGS TO BE DONE WITHIN THE FUNCTION return(...) } A function object usually include: Self-defined name Arguments Return Let’s consider a simple example. First we define a custom function called my_center(): This function takes a vector object x as its input argument; It subtracts each element of x by the mean score of x, and divides the difference by the standard deviation of x; The resulting vector is returned as the output of the function. ## define function my_center &lt;- function(x) { (x - mean(x))/sd(x) } Now we can apply our my_center function to each element (e.g., the scores of each class) in exams.list: ## apply function via map() map(exams.list, my_center) $class1 [1] 0.80947090 0.70138131 1.16976952 1.20579938 0.52123200 -0.77584303 [7] -0.81187289 1.42197855 -1.35232082 1.31388897 -1.78467916 -0.27142496 [13] -0.73981317 0.05284380 -0.73981317 0.73741118 -1.02805206 0.88153062 [19] -1.06408192 -1.42438054 -0.16333537 -0.05524579 1.16976952 -1.74864930 [25] 0.19696325 0.12490352 -0.09127565 1.13373966 1.31388897 -0.70378330 $class2 [1] -1.3014329 0.5848464 -0.9421416 -0.3133818 -0.5828503 0.4950235 [7] 0.2255551 -1.1217872 0.8243739 0.9441377 0.7644920 1.0639014 [13] -1.4810785 -0.8523188 -1.3313738 -0.1636771 1.1237833 -1.0319644 [19] 1.3932518 -1.3912557 1.0938424 0.6746692 -0.1936181 1.3333699 [25] 1.0339605 0.6147873 -1.3912557 1.3333699 -1.0619054 -0.3433228 $class3 [1] -1.20132728 1.77409632 1.43936117 1.03024042 -0.42027858 0.06322775 [7] -0.94097771 -0.53185697 1.51374676 0.43515570 -1.27571287 -0.64343535 [13] 0.47234850 -0.68062815 0.10042055 0.24919173 0.88146924 0.91866204 [19] 1.73690353 0.80708365 -0.56904976 -0.68062815 -1.01536330 -1.46167684 [25] -0.64343535 0.43515570 0.50954129 -1.57325523 -1.31290566 0.58392688 $class4 [1] 0.284078837 1.405442667 -1.285830525 0.155922971 1.405442667 [6] 1.085053002 1.117091968 -0.837284993 1.245247834 0.284078837 [11] -0.837284993 0.540390570 -0.837284993 0.059806071 -0.837284993 [16] -1.670298124 -1.638259158 0.572429536 0.828741269 -1.638259158 [21] 1.373403701 -0.068349795 -0.004271862 1.341364734 0.412234703 [26] 0.444273670 -1.478064325 -0.420778428 -0.645051194 -0.356700495 $class5 [1] -1.12944400 -0.24723605 -1.35816458 0.63497189 1.35380800 0.40625131 [7] 1.71322605 -1.42351332 -1.22746711 -0.01851548 -0.99874653 1.22311052 [13] 0.70032063 1.09241305 0.60229752 -0.50863100 -0.83537468 0.76566937 [19] -1.22746711 1.22311052 -0.27991042 -0.37793353 0.96171558 -1.48886205 [25] -1.06409526 -0.47595663 1.19043615 0.83101810 0.70032063 -0.73735158 ## try different return structures map_df(exams.list, my_center) After centering, we can quickly identify subjects whose scores are one standard deviation above their class average. Based on the skills you’ve learned, any idea how to do this? Exercise 11.6 Use the built-in the mtcars dataset (?mtcars for more detail). How do you get the class type of each column in the mtcars by using map()? Exercise 11.7 Create a self-defined function to convert each number of a numeric vector to a “z” score. y &lt;- c(1, 4, 6, 10, 20) my_z(y) [1] -0.9779865 -0.5704921 -0.2988292 0.2444966 1.6028112 Exercise 11.8 Use the earlier dataset exams.list. For each element in exams.list, please convert the student’s score to a z-score by applying your self-defined function in an iterative structure (e.g., map). Please present the result as a data frame. References Wickham, H., &amp; Grolemund, G. (2017). R for data science: Import, tidy, transform, visualize, and model data (1st ed.). O’Reilly Media, Inc. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
